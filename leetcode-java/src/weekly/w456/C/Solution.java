package weekly.w456.C;

import ability.Benchmark;

/**
 * Q3. Partition Array to Minimize XOR
 *
 * https://leetcode.cn/contest/weekly-contest-456/problems/partition-array-to-minimize-xor/
 *
 * You are given an integer array nums and an integer k.
 *
 * Your task is to partition nums into k non-empty subarrays.
 *
 * For each subarray, compute the bitwise XOR of all its elements.
 *
 * Return the minimum possible value of the maximum XOR among these k subarrays.
 */

public class Solution {

    // 将数组分为 k 个非空的子数组, 求所有子数组的最大 XOR 值的最小可能值
    public int minXor(int[] nums, int k) {
        if (k == nums.length) {
            int ans = nums[0];
            for (var v : nums) ans = Math.max(ans, v);
            return ans;
        }

        int bits = 0; for (var v : nums) bits |= v;

        int l = -1, r = bits;
        while (l + 1 < r) {
            int mid = l + (r - l) / 2;
            if (check(nums, k, mid)) r = mid;
            else l = mid;
        }
        return r;
    }

    // 是否可以将数组分为 k 个非空的子数组, 且每一段的 xor 值都小于等于 max
    private boolean check(int[] nums, int k, int max) {
        // dp[i][j] 表示是否可以将 [0, i) 分为 j 段, 每段的 xor 值都小于等于 max
        boolean[][] dp = new boolean[nums.length + 1][k + 1];
        for (int i = 0, xor = 0; i < nums.length; i++) {
            dp[i + 1][1] = (xor ^= nums[i]) <= max;
        }

        for (int r = 0; r < nums.length; r++) {
            // 枚举将 [l, r] 分为单独的一段, 则可以从 dp[l][j - 1] 转移而来
            //  - 前面至少要保留 j - 1 个元素, 也就是
            for (int j = 2; j <= k; j++) {
                int xor = 0;
                for (int l = r; l >= j - 1; l--) {
                    if ((xor ^= nums[l]) > max) continue;
                    dp[r + 1][j] = dp[r + 1][j] || dp[l][j - 1];
                    if (dp[r + 1][j]) break;
                }
            }
        }

        return dp[nums.length][k];
    }

    public static void main(String[] args) {
        Benchmark.benchmark("", () -> {
            assert new Solution().minXor(new int[]{
                402812614,594053513,374931791,966905619,324922400,487860861,543071456,190580767,
                491346731,340697620,23978457,921525569,256400484,67466780,779986522,913819918,
                637472497,493972831,453655164,472288578,361157715,154544305,57376456,62083851,
                354884585,531521391,338431076,173251654,968153148,523163104,312525624,629691083,
                273415957,255344749,30696041,150289635,910291589,157104317,341439503,626297463,
                807950542,344327475,547517153,131273776,90199372,886791597,556715682,712489650,
                587152210,721870918,501725241,573336275,250126708,923365168,914469064,846514544,
                622833984,3864758,252501299,241827807,966608504,853827089,923295650,864987050,
                140672905,965232507,805778216,925993946,340351651,816131295,970285873,249207167,
                308166336,739349841,544850519,550658105,186317363,970071039,475198309,14967839,
                320954579,647305331,88984284,754825376,4807362,197513946,513013077,436846946,
                665612098,370771814,766565425,354095918,437819872,202971261,143356849,586687564,
                786414196,710079648,608098205,296889373,109725372,120835639,902074750,343570923,
                678997479,253610731,100262855,993551628,95166537,3177069,740699714,754651347,268918018,
                396694156,98765224,38202962,375600242,62458968,336008469,469223662,175266821,380567455,
                254786198,119915893,382830937,562070298,364631126,53549485,966093113,717515084,92359174,
                575110533,539553605,654061817,440833471,598946368,252483399,898373502,355925985,835464760,
                393564546,65747234,206766078,323661188,421014114,139777029,351217335,672337467,884363875,
                343592259,700548718,417221985,831854676,133906941,918063674,385007075,951327261,772454774,
                489213969,660806853,754526251,869649600,603359763,632806226,78144526,866800370,884987696,
                598394028,733762043,108926468,286248779,441814924,452091546,660594097,971813162,450898346,
                537312412,868381443,534704837,603662213,825585615,79651909,514688568,839348205,824431610,
                425746222,768527070,834393259,305271111,932261939,234667637,427189176,193565497,610306960,
                882141968,662500426,422985908,305996261,365654869,635827983,599258544,379861447,679096091,
                677407727,416218066,284403183,698462145,727103777
            }, 107) == 534704837;
        });

        assert new Solution().minXor(new int[]{1,2,3}, 2) == 1;
        assert new Solution().minXor(new int[]{2,3,3,2}, 3) == 2;
        assert new Solution().minXor(new int[]{1,1,2,3,1}, 2) == 0;
    }

}
